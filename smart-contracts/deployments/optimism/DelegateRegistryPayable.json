{
  "address": "0x3a53ba5A80a879650363a4A89759C2224386B8d1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "DelegateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        }
      ],
      "name": "DelegateRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEREGISTER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROVIDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        }
      ],
      "name": "deregisterDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "deregisterDelegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expiryDateForRegistryBackfill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        }
      ],
      "name": "isDelegateRegistered",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "isRegistered",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "registerDelegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "registerDelegateBySig",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "setExpiryDateForRegistryBackfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_registrationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "setRegistrationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenChainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "uploadDelegate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c93c95aa9a12a6bc73c043d8ca215dc502074e206f47b15c1f385b0b257321e",
  "receipt": {
    "to": null,
    "from": "0xf768f5F340e89698465Fc7C12F31cB485fFf98D2",
    "contractAddress": "0x3a53ba5A80a879650363a4A89759C2224386B8d1",
    "transactionIndex": 6,
    "gasUsed": "2807719",
    "logsBloom": "0x
    "blockHash": "0x2f4ccb7a9912fd390b36dd99a04b7d10580145ca37963548d6baca586447654c",
    "transactionHash": "0x4c93c95aa9a12a6bc73c043d8ca215dc502074e206f47b15c1f385b0b257321e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 112152337,
        "transactionHash": "0x4c93c95aa9a12a6bc73c043d8ca215dc502074e206f47b15c1f385b0b257321e",
        "address": "0x3a53ba5A80a879650363a4A89759C2224386B8d1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f768f5f340e89698465fc7c12f31cb485fff98d2",
          "0x000000000000000000000000f768f5f340e89698465fc7c12f31cb485fff98d2"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x2f4ccb7a9912fd390b36dd99a04b7d10580145ca37963548d6baca586447654c"
      }
    ],
    "blockNumber": 112152337,
    "cumulativeGasUsed": "3598813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf768f5F340e89698465Fc7C12F31cB485fFf98D2"
  ],
  "numDeployments": 1,
  "solcInputHash": "9540061fda09cf15f3df089204260c61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"DelegateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"}],\"name\":\"DelegateRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEREGISTER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"}],\"name\":\"deregisterDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deregisterDelegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiryDateForRegistryBackfill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"}],\"name\":\"isDelegateRegistered\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"isRegistered\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"registerDelegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"registerDelegateBySig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"setExpiryDateForRegistryBackfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenChainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"uploadDelegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DelegateRegistryPayable.sol\":\"DelegateRegistryPayable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DelegateRegistryPayable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract DelegateRegistryPayable is EIP712, AccessControl  {\\n   bytes32 public constant PROVIDER_ROLE = keccak256(\\\"PROVIDER_ROLE\\\");\\n\\n    mapping(address => mapping(address => mapping(uint256 => uint8))) public delegates;\\n    mapping (address => uint) public nonces;\\n\\n    uint public expiryDateForRegistryBackfill;\\n    uint256 public registrationFeeAmount;\\n\\n    constructor(address admin) EIP712(\\\"delegate-registry\\\", \\\"1.0\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    bytes32 public constant REGISTER_TYPEHASH =\\n        keccak256(\\\"RegisterDelegate(address tokenAddress,uint256 tokenChainId,string metadata,uint256 nonce,uint256 expiry)\\\");\\n    bytes32 public constant DEREGISTER_TYPEHASH =\\n        keccak256(\\\"DeregisterDelegate(address tokenAddress,uint256 tokenChainId,uint256 nonce,uint256 expiry)\\\");\\n\\n    event DelegateAdded(address indexed delegateAddress, address indexed tokenAddress, uint256 tokenChainId, string metadata);\\n    event DelegateRemoved(address indexed delegateAddress, address indexed tokenAddress, uint256 tokenChainId);\\n\\n    function setExpiryDateForRegistryBackfill(uint expiry) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        expiryDateForRegistryBackfill = expiry;\\n    }\\n\\n    function setRegistrationFee(uint256 _registrationFeeAmount) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        registrationFeeAmount = _registrationFeeAmount;\\n    }\\n\\n    function registerDelegate(address tokenAddress, uint256 tokenChainId, string memory metadata) public payable {\\n        _payRegistrationFee();\\n        _registerDelegate(msg.sender, tokenAddress, tokenChainId, metadata);\\n    }\\n\\n    function uploadDelegate(\\n        address delegateAddress,\\n        address tokenAddress,\\n        uint256 tokenChainId,\\n        string memory metadata\\n    ) public payable onlyRole(PROVIDER_ROLE) {\\n        require(block.timestamp <= expiryDateForRegistryBackfill, \\\"RegisterDelegate: registry backfill period has expired\\\");\\n        _payRegistrationFee();\\n        _registerDelegate(delegateAddress, tokenAddress, tokenChainId, metadata);\\n    }\\n\\n   function registerDelegateBySig(\\n        address delegateAddress,\\n        address tokenAddress,\\n        uint256 tokenChainId,\\n        string memory metadata,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual {\\n        require(block.timestamp <= expiry, \\\"RegisterDelegate: signature expired\\\");\\n        _payRegistrationFee();\\n\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(\\n                REGISTER_TYPEHASH,\\n                tokenAddress,\\n                tokenChainId,\\n                keccak256(bytes(metadata)),\\n                nonce,\\n                expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(delegateAddress == signer, \\\"Signer and delegate addresses don't match\\\");\\n        require(nonce == nonces[signer]++, \\\"RegisterDelegate: invalid nonce\\\");\\n        _registerDelegate(signer, tokenAddress, tokenChainId, metadata);\\n    }\\n\\n    function deregisterDelegate(address tokenAddress, uint256 tokenChainId) public {\\n        require(isDelegateRegistered(msg.sender, tokenAddress, tokenChainId) == 1, \\\"Not a registered delegate\\\");\\n        _deregisterDelegate(msg.sender, tokenAddress, tokenChainId);\\n        _refundRegistrationFee();\\n    }\\n\\n function deregisterDelegateBySig(\\n        address tokenAddress,\\n        uint256 tokenChainId,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(block.timestamp <= expiry, \\\"DeregisterDelegate: signature expired\\\");\\n\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(\\n                DEREGISTER_TYPEHASH,\\n                tokenAddress,\\n                tokenChainId,\\n                nonce,\\n                expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == nonces[signer]++, \\\"DeregisterDelegate: invalid nonce\\\");\\n        require(isDelegateRegistered(signer, tokenAddress, tokenChainId) == 1, \\\"Not a registered delegate\\\");\\n\\n        _deregisterDelegate(signer, tokenAddress, tokenChainId);\\n        _refundRegistrationFee();\\n    }\\n\\n    function isDelegateRegistered(address delegateAddress, address tokenAddress, uint256 tokenChainId)\\n        public\\n        view\\n        returns (uint8 isRegistered)\\n    {\\n        return delegates[delegateAddress][tokenAddress][tokenChainId];\\n    }\\n\\n    function _registerDelegate(\\n        address delegateAddress,\\n        address tokenAddress,\\n        uint256 tokenChainId,\\n        string memory metadata\\n    )\\n        private\\n    {\\n        delegates[delegateAddress][tokenAddress][tokenChainId] = 1;\\n\\n        emit DelegateAdded(delegateAddress, tokenAddress, tokenChainId, metadata);\\n    }\\n\\n    function _deregisterDelegate(address delegateAddress, address tokenAddress, uint256 tokenChainId) private {\\n        require(delegates[delegateAddress][tokenAddress][tokenChainId] != 0, \\\"DeregisterDelegate: Already deregistered\\\");\\n        delegates[delegateAddress][tokenAddress][tokenChainId] = 0;\\n        emit DelegateRemoved(delegateAddress, tokenAddress, tokenChainId);\\n    }\\n\\n    function _payRegistrationFee() internal {\\n        require(msg.value >= registrationFeeAmount, \\\"RegisterDelegate: insufficient fee\\\");\\n        if (msg.value > registrationFeeAmount) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value - registrationFeeAmount}(\\\"\\\");\\n            require(success, \\\"Refund of excess fee failed\\\");\\n        }\\n    }\\n\\n    function _refundRegistrationFee() private {\\n        require(address(this).balance >= registrationFeeAmount, \\\"Insufficient balance for refund\\\");\\n        (bool success, ) = payable(msg.sender).call{value: registrationFeeAmount}(\\\"\\\");\\n        require(success, \\\"Refund failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6f946887efcd95ae5923912224e981323dbec144f4fa49c66720f2adf265616f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620035f6380380620035f683398181016040528101906200003891906200037b565b6040518060400160405280601181526020017f64656c65676174652d72656769737472790000000000000000000000000000008152506040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a081815250506200010d8184846200017260201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050506200016b6000801b82620001ae60201b60201c565b5062000451565b600083838346306040516020016200018f959493929190620003f4565b6040516020818303038152906040528051906020012090509392505050565b620001c082826200029f60201b60201c565b6200029b57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002406200030960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003438262000316565b9050919050565b620003558162000336565b81146200036157600080fd5b50565b60008151905062000375816200034a565b92915050565b60006020828403121562000394576200039362000311565b5b6000620003a48482850162000364565b91505092915050565b6000819050919050565b620003c281620003ad565b82525050565b6000819050919050565b620003dd81620003c8565b82525050565b620003ee8162000336565b82525050565b600060a0820190506200040b6000830188620003b7565b6200041a6020830187620003b7565b620004296040830186620003b7565b620004386060830185620003d2565b620004476080830184620003e3565b9695505050505050565b60805160a05160c05160e0516101005161012051613155620004a160003960006115580152600061159a01526000611579015260006114ae015260006115040152600061152d01526131556000f3fe6080604052600436106101355760003560e01c80636a5306a3116100ab57806391d148541161006f57806391d148541461041e578063984004661461045b578063a217fddf14610477578063b7967cf3146104a2578063c320c727146104cb578063d547741f146104f457610135565b80636a5306a314610341578063733ed1c91461036c578063779de8b5146103885780637ecebe00146103a4578063867a1c34146103e157610135565b8063248a9ca3116100fd578063248a9ca31461023157806324c20a341461026e5780632f2ff15d1461029957806336568abe146102c2578063545c022a146102eb5780635d47d7791461031657610135565b806301ffc9a71461013a5780631a6a0ce2146101775780631a7f61a5146101a25780631bdec852146101cb578063228ce014146101f4575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190611bd3565b61051d565b60405161016e9190611c1b565b60405180910390f35b34801561018357600080fd5b5061018c610597565b6040516101999190611c4f565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190611d63565b61059d565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190611e05565b610748565b005b34801561020057600080fd5b5061021b60048036038101906102169190611e45565b6107af565b6040516102289190611ea7565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190611ec2565b610855565b6040516102659190611efe565b60405180910390f35b34801561027a57600080fd5b50610283610874565b6040516102909190611efe565b60405180910390f35b3480156102a557600080fd5b506102c060048036038101906102bb9190611f19565b610898565b005b3480156102ce57600080fd5b506102e960048036038101906102e49190611f19565b6108b9565b005b3480156102f757600080fd5b5061030061093c565b60405161030d9190611c4f565b60405180910390f35b34801561032257600080fd5b5061032b610942565b6040516103389190611efe565b60405180910390f35b34801561034d57600080fd5b50610356610966565b6040516103639190611efe565b60405180910390f35b6103866004803603810190610381919061209f565b61098a565b005b6103a2600480360381019061039d919061210e565b6109a3565b005b3480156103b057600080fd5b506103cb60048036038101906103c69190612191565b610a2d565b6040516103d89190611c4f565b60405180910390f35b3480156103ed57600080fd5b5061040860048036038101906104039190611e45565b610a45565b6040516104159190611ea7565b60405180910390f35b34801561042a57600080fd5b5061044560048036038101906104409190611f19565b610a81565b6040516104529190611c1b565b60405180910390f35b610475600480360381019061047091906121be565b610aeb565b005b34801561048357600080fd5b5061048c610cc0565b6040516104999190611efe565b60405180910390f35b3480156104ae57600080fd5b506104c960048036038101906104c491906122a4565b610cc7565b005b3480156104d757600080fd5b506104f260048036038101906104ed91906122a4565b610cdf565b005b34801561050057600080fd5b5061051b60048036038101906105169190611f19565b610cf7565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610590575061058f82610d18565b5b9050919050565b60045481565b834211156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790612354565b60405180910390fd5b600061064461063c7fb49ef440e034b80c5563a6367f2ed85be6cd5ed142b9818159faf97273dc6aa68a8a8a8a604051602001610621959493929190612383565b60405160208183030381529060405280519060200120610d82565b858585610d9c565b9050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061069690612405565b9190505586146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906124bf565b60405180910390fd5b60016106e8828a8a6107af565b60ff161461072b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107229061252b565b60405180910390fd5b610736818989610dc7565b61073e610fb8565b5050505050505050565b60016107553384846107af565b60ff1614610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061252b565b60405180910390fd5b6107a3338383610dc7565b6107ab610fb8565b5050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b6000806000838152602001908152602001600020600101549050919050565b7f18d9ff454de989bd126b06bd404b47ede75f9e65543e94e8d212f89d7dcbb87c81565b6108a182610855565b6108aa816110ae565b6108b483836110c2565b505050565b6108c16111a2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461092e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610925906125bd565b60405180910390fd5b61093882826111aa565b5050565b60035481565b7fb49ef440e034b80c5563a6367f2ed85be6cd5ed142b9818159faf97273dc6aa681565b7f62f336915c19779a574ca5ec6e327da56f347d8e548daf06f207c3d4d381c81481565b61099261128b565b61099e33848484611397565b505050565b7f18d9ff454de989bd126b06bd404b47ede75f9e65543e94e8d212f89d7dcbb87c6109cd816110ae565b600354421115610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a099061264f565b60405180910390fd5b610a1a61128b565b610a2685858585611397565b5050505050565b60026020528060005260406000206000915090505481565b6001602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b83421115610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b25906126e1565b60405180910390fd5b610b3661128b565b6000610ba3610b9b7f62f336915c19779a574ca5ec6e327da56f347d8e548daf06f207c3d4d381c8148b8b8b805190602001208b8b604051602001610b8096959493929190612701565b60405160208183030381529060405280519060200120610d82565b858585610d9c565b90508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a906127d4565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c6390612405565b919050558614610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f90612840565b60405180910390fd5b610cb4818a8a8a611397565b50505050505050505050565b6000801b81565b6000801b610cd4816110ae565b816003819055505050565b6000801b610cec816110ae565b816004819055505050565b610d0082610855565b610d09816110ae565b610d1383836111aa565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000610d95610d8f6114aa565b836115c4565b9050919050565b6000806000610dad878787876115f7565b91509150610dba816116d9565b8192505050949350505050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1660ff1603610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e906128d2565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fec7796ac22cd691744830d7a8a9a7d21752be77e84ebc1ee5dca0ae6e47d9da383604051610fab9190611c4f565b60405180910390a3505050565b600454471015610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff49061293e565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166004546040516110259061298f565b60006040518083038185875af1925050503d8060008114611062576040519150601f19603f3d011682016040523d82523d6000602084013e611067565b606091505b50509050806110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a2906129f0565b60405180910390fd5b50565b6110bf816110ba6111a2565b61183f565b50565b6110cc8282610a81565b61119e57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111436111a2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6111b48282610a81565b1561128757600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061122c6111a2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6004543410156112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c790612a82565b60405180910390fd5b6004543411156113955760003373ffffffffffffffffffffffffffffffffffffffff16600454346113019190612aa2565b60405161130d9061298f565b60006040518083038185875af1925050503d806000811461134a576040519150601f19603f3d011682016040523d82523d6000602084013e61134f565b606091505b5050905080611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a90612b22565b60405180910390fd5b505b565b60018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff8062ac22dc3b85838812d1c14968311ef4bda78cf9f74aba563533ad670c417848460405161149c929190612bb0565b60405180910390a350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561152657507f000000000000000000000000000000000000000000000000000000000000000046145b15611553577f000000000000000000000000000000000000000000000000000000000000000090506115c1565b6115be7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118c4565b90505b90565b600082826040516020016115d9929190612c58565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156116325760006003915091506116d0565b6000600187878787604051600081526020016040526040516116579493929190612c8f565b6020604051602081039080840390855afa158015611679573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116c7576000600192509250506116d0565b80600092509250505b94509492505050565b600060048111156116ed576116ec612cd4565b5b816004811115611700576116ff612cd4565b5b031561183c576001600481111561171a57611719612cd4565b5b81600481111561172d5761172c612cd4565b5b0361176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176490612d4f565b60405180910390fd5b6002600481111561178157611780612cd4565b5b81600481111561179457611793612cd4565b5b036117d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cb90612dbb565b60405180910390fd5b600360048111156117e8576117e7612cd4565b5b8160048111156117fb576117fa612cd4565b5b0361183b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183290612e4d565b60405180910390fd5b5b50565b6118498282610a81565b6118c057611856816118fe565b6118648360001c602061192b565b604051602001611875929190612f36565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b79190612f70565b60405180910390fd5b5050565b600083838346306040516020016118df959493929190612f92565b6040516020818303038152906040528051906020012090509392505050565b60606119248273ffffffffffffffffffffffffffffffffffffffff16601460ff1661192b565b9050919050565b60606000600283600261193e9190612fe5565b6119489190613027565b67ffffffffffffffff81111561196157611960611f74565b5b6040519080825280601f01601f1916602001820160405280156119935781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106119cb576119ca61305b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a2f57611a2e61305b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611a6f9190612fe5565b611a799190613027565b90505b6001811115611b19577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611abb57611aba61305b565b5b1a60f81b828281518110611ad257611ad161305b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611b129061308a565b9050611a7c565b5060008414611b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b54906130ff565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bb081611b7b565b8114611bbb57600080fd5b50565b600081359050611bcd81611ba7565b92915050565b600060208284031215611be957611be8611b71565b5b6000611bf784828501611bbe565b91505092915050565b60008115159050919050565b611c1581611c00565b82525050565b6000602082019050611c306000830184611c0c565b92915050565b6000819050919050565b611c4981611c36565b82525050565b6000602082019050611c646000830184611c40565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9582611c6a565b9050919050565b611ca581611c8a565b8114611cb057600080fd5b50565b600081359050611cc281611c9c565b92915050565b611cd181611c36565b8114611cdc57600080fd5b50565b600081359050611cee81611cc8565b92915050565b600060ff82169050919050565b611d0a81611cf4565b8114611d1557600080fd5b50565b600081359050611d2781611d01565b92915050565b6000819050919050565b611d4081611d2d565b8114611d4b57600080fd5b50565b600081359050611d5d81611d37565b92915050565b600080600080600080600060e0888a031215611d8257611d81611b71565b5b6000611d908a828b01611cb3565b9750506020611da18a828b01611cdf565b9650506040611db28a828b01611cdf565b9550506060611dc38a828b01611cdf565b9450506080611dd48a828b01611d18565b93505060a0611de58a828b01611d4e565b92505060c0611df68a828b01611d4e565b91505092959891949750929550565b60008060408385031215611e1c57611e1b611b71565b5b6000611e2a85828601611cb3565b9250506020611e3b85828601611cdf565b9150509250929050565b600080600060608486031215611e5e57611e5d611b71565b5b6000611e6c86828701611cb3565b9350506020611e7d86828701611cb3565b9250506040611e8e86828701611cdf565b9150509250925092565b611ea181611cf4565b82525050565b6000602082019050611ebc6000830184611e98565b92915050565b600060208284031215611ed857611ed7611b71565b5b6000611ee684828501611d4e565b91505092915050565b611ef881611d2d565b82525050565b6000602082019050611f136000830184611eef565b92915050565b60008060408385031215611f3057611f2f611b71565b5b6000611f3e85828601611d4e565b9250506020611f4f85828601611cb3565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fac82611f63565b810181811067ffffffffffffffff82111715611fcb57611fca611f74565b5b80604052505050565b6000611fde611b67565b9050611fea8282611fa3565b919050565b600067ffffffffffffffff82111561200a57612009611f74565b5b61201382611f63565b9050602081019050919050565b82818337600083830152505050565b600061204261203d84611fef565b611fd4565b90508281526020810184848401111561205e5761205d611f5e565b5b612069848285612020565b509392505050565b600082601f83011261208657612085611f59565b5b813561209684826020860161202f565b91505092915050565b6000806000606084860312156120b8576120b7611b71565b5b60006120c686828701611cb3565b93505060206120d786828701611cdf565b925050604084013567ffffffffffffffff8111156120f8576120f7611b76565b5b61210486828701612071565b9150509250925092565b6000806000806080858703121561212857612127611b71565b5b600061213687828801611cb3565b945050602061214787828801611cb3565b935050604061215887828801611cdf565b925050606085013567ffffffffffffffff81111561217957612178611b76565b5b61218587828801612071565b91505092959194509250565b6000602082840312156121a7576121a6611b71565b5b60006121b584828501611cb3565b91505092915050565b60008060008060008060008060006101208a8c0312156121e1576121e0611b71565b5b60006121ef8c828d01611cb3565b99505060206122008c828d01611cb3565b98505060406122118c828d01611cdf565b97505060608a013567ffffffffffffffff81111561223257612231611b76565b5b61223e8c828d01612071565b965050608061224f8c828d01611cdf565b95505060a06122608c828d01611cdf565b94505060c06122718c828d01611d18565b93505060e06122828c828d01611d4e565b9250506101006122948c828d01611d4e565b9150509295985092959850929598565b6000602082840312156122ba576122b9611b71565b5b60006122c884828501611cdf565b91505092915050565b600082825260208201905092915050565b7f4465726567697374657244656c65676174653a207369676e617475726520657860008201527f7069726564000000000000000000000000000000000000000000000000000000602082015250565b600061233e6025836122d1565b9150612349826122e2565b604082019050919050565b6000602082019050818103600083015261236d81612331565b9050919050565b61237d81611c8a565b82525050565b600060a0820190506123986000830188611eef565b6123a56020830187612374565b6123b26040830186611c40565b6123bf6060830185611c40565b6123cc6080830184611c40565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061241082611c36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612442576124416123d6565b5b600182019050919050565b7f4465726567697374657244656c65676174653a20696e76616c6964206e6f6e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006124a96021836122d1565b91506124b48261244d565b604082019050919050565b600060208201905081810360008301526124d88161249c565b9050919050565b7f4e6f74206120726567697374657265642064656c656761746500000000000000600082015250565b60006125156019836122d1565b9150612520826124df565b602082019050919050565b6000602082019050818103600083015261254481612508565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006125a7602f836122d1565b91506125b28261254b565b604082019050919050565b600060208201905081810360008301526125d68161259a565b9050919050565b7f526567697374657244656c65676174653a207265676973747279206261636b6660008201527f696c6c20706572696f6420686173206578706972656400000000000000000000602082015250565b60006126396036836122d1565b9150612644826125dd565b604082019050919050565b600060208201905081810360008301526126688161262c565b9050919050565b7f526567697374657244656c65676174653a207369676e6174757265206578706960008201527f7265640000000000000000000000000000000000000000000000000000000000602082015250565b60006126cb6023836122d1565b91506126d68261266f565b604082019050919050565b600060208201905081810360008301526126fa816126be565b9050919050565b600060c0820190506127166000830189611eef565b6127236020830188612374565b6127306040830187611c40565b61273d6060830186611eef565b61274a6080830185611c40565b61275760a0830184611c40565b979650505050505050565b7f5369676e657220616e642064656c65676174652061646472657373657320646f60008201527f6e2774206d617463680000000000000000000000000000000000000000000000602082015250565b60006127be6029836122d1565b91506127c982612762565b604082019050919050565b600060208201905081810360008301526127ed816127b1565b9050919050565b7f526567697374657244656c65676174653a20696e76616c6964206e6f6e636500600082015250565b600061282a601f836122d1565b9150612835826127f4565b602082019050919050565b600060208201905081810360008301526128598161281d565b9050919050565b7f4465726567697374657244656c65676174653a20416c7265616479206465726560008201527f6769737465726564000000000000000000000000000000000000000000000000602082015250565b60006128bc6028836122d1565b91506128c782612860565b604082019050919050565b600060208201905081810360008301526128eb816128af565b9050919050565b7f496e73756666696369656e742062616c616e636520666f7220726566756e6400600082015250565b6000612928601f836122d1565b9150612933826128f2565b602082019050919050565b600060208201905081810360008301526129578161291b565b9050919050565b600081905092915050565b50565b600061297960008361295e565b915061298482612969565b600082019050919050565b600061299a8261296c565b9150819050919050565b7f526566756e64206661696c656400000000000000000000000000000000000000600082015250565b60006129da600d836122d1565b91506129e5826129a4565b602082019050919050565b60006020820190508181036000830152612a09816129cd565b9050919050565b7f526567697374657244656c65676174653a20696e73756666696369656e74206660008201527f6565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a6c6022836122d1565b9150612a7782612a10565b604082019050919050565b60006020820190508181036000830152612a9b81612a5f565b9050919050565b6000612aad82611c36565b9150612ab883611c36565b9250828203905081811115612ad057612acf6123d6565b5b92915050565b7f526566756e64206f662065786365737320666565206661696c65640000000000600082015250565b6000612b0c601b836122d1565b9150612b1782612ad6565b602082019050919050565b60006020820190508181036000830152612b3b81612aff565b9050919050565b600081519050919050565b60005b83811015612b6b578082015181840152602081019050612b50565b60008484015250505050565b6000612b8282612b42565b612b8c81856122d1565b9350612b9c818560208601612b4d565b612ba581611f63565b840191505092915050565b6000604082019050612bc56000830185611c40565b8181036020830152612bd78184612b77565b90509392505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000612c21600283612be0565b9150612c2c82612beb565b600282019050919050565b6000819050919050565b612c52612c4d82611d2d565b612c37565b82525050565b6000612c6382612c14565b9150612c6f8285612c41565b602082019150612c7f8284612c41565b6020820191508190509392505050565b6000608082019050612ca46000830187611eef565b612cb16020830186611e98565b612cbe6040830185611eef565b612ccb6060830184611eef565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612d396018836122d1565b9150612d4482612d03565b602082019050919050565b60006020820190508181036000830152612d6881612d2c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612da5601f836122d1565b9150612db082612d6f565b602082019050919050565b60006020820190508181036000830152612dd481612d98565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e376022836122d1565b9150612e4282612ddb565b604082019050919050565b60006020820190508181036000830152612e6681612e2a565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612ea3601783612be0565b9150612eae82612e6d565b601782019050919050565b6000612ec482612b42565b612ece8185612be0565b9350612ede818560208601612b4d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612f20601183612be0565b9150612f2b82612eea565b601182019050919050565b6000612f4182612e96565b9150612f4d8285612eb9565b9150612f5882612f13565b9150612f648284612eb9565b91508190509392505050565b60006020820190508181036000830152612f8a8184612b77565b905092915050565b600060a082019050612fa76000830188611eef565b612fb46020830187611eef565b612fc16040830186611eef565b612fce6060830185611c40565b612fdb6080830184612374565b9695505050505050565b6000612ff082611c36565b9150612ffb83611c36565b925082820261300981611c36565b915082820484148315176130205761301f6123d6565b5b5092915050565b600061303282611c36565b915061303d83611c36565b9250828201905080821115613055576130546123d6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061309582611c36565b9150600082036130a8576130a76123d6565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006130e96020836122d1565b91506130f4826130b3565b602082019050919050565b60006020820190508181036000830152613118816130dc565b905091905056fea2646970667358221220e028e149747d32d5588dc1a24d673ff43243999d2ebca49296d7d2b4678fe03164736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80636a5306a3116100ab57806391d148541161006f57806391d148541461041e578063984004661461045b578063a217fddf14610477578063b7967cf3146104a2578063c320c727146104cb578063d547741f146104f457610135565b80636a5306a314610341578063733ed1c91461036c578063779de8b5146103885780637ecebe00146103a4578063867a1c34146103e157610135565b8063248a9ca3116100fd578063248a9ca31461023157806324c20a341461026e5780632f2ff15d1461029957806336568abe146102c2578063545c022a146102eb5780635d47d7791461031657610135565b806301ffc9a71461013a5780631a6a0ce2146101775780631a7f61a5146101a25780631bdec852146101cb578063228ce014146101f4575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190611bd3565b61051d565b60405161016e9190611c1b565b60405180910390f35b34801561018357600080fd5b5061018c610597565b6040516101999190611c4f565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190611d63565b61059d565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190611e05565b610748565b005b34801561020057600080fd5b5061021b60048036038101906102169190611e45565b6107af565b6040516102289190611ea7565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190611ec2565b610855565b6040516102659190611efe565b60405180910390f35b34801561027a57600080fd5b50610283610874565b6040516102909190611efe565b60405180910390f35b3480156102a557600080fd5b506102c060048036038101906102bb9190611f19565b610898565b005b3480156102ce57600080fd5b506102e960048036038101906102e49190611f19565b6108b9565b005b3480156102f757600080fd5b5061030061093c565b60405161030d9190611c4f565b60405180910390f35b34801561032257600080fd5b5061032b610942565b6040516103389190611efe565b60405180910390f35b34801561034d57600080fd5b50610356610966565b6040516103639190611efe565b60405180910390f35b6103866004803603810190610381919061209f565b61098a565b005b6103a2600480360381019061039d919061210e565b6109a3565b005b3480156103b057600080fd5b506103cb60048036038101906103c69190612191565b610a2d565b6040516103d89190611c4f565b60405180910390f35b3480156103ed57600080fd5b5061040860048036038101906104039190611e45565b610a45565b6040516104159190611ea7565b60405180910390f35b34801561042a57600080fd5b5061044560048036038101906104409190611f19565b610a81565b6040516104529190611c1b565b60405180910390f35b610475600480360381019061047091906121be565b610aeb565b005b34801561048357600080fd5b5061048c610cc0565b6040516104999190611efe565b60405180910390f35b3480156104ae57600080fd5b506104c960048036038101906104c491906122a4565b610cc7565b005b3480156104d757600080fd5b506104f260048036038101906104ed91906122a4565b610cdf565b005b34801561050057600080fd5b5061051b60048036038101906105169190611f19565b610cf7565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610590575061058f82610d18565b5b9050919050565b60045481565b834211156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790612354565b60405180910390fd5b600061064461063c7fb49ef440e034b80c5563a6367f2ed85be6cd5ed142b9818159faf97273dc6aa68a8a8a8a604051602001610621959493929190612383565b60405160208183030381529060405280519060200120610d82565b858585610d9c565b9050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061069690612405565b9190505586146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906124bf565b60405180910390fd5b60016106e8828a8a6107af565b60ff161461072b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107229061252b565b60405180910390fd5b610736818989610dc7565b61073e610fb8565b5050505050505050565b60016107553384846107af565b60ff1614610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061252b565b60405180910390fd5b6107a3338383610dc7565b6107ab610fb8565b5050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b6000806000838152602001908152602001600020600101549050919050565b7f18d9ff454de989bd126b06bd404b47ede75f9e65543e94e8d212f89d7dcbb87c81565b6108a182610855565b6108aa816110ae565b6108b483836110c2565b505050565b6108c16111a2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461092e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610925906125bd565b60405180910390fd5b61093882826111aa565b5050565b60035481565b7fb49ef440e034b80c5563a6367f2ed85be6cd5ed142b9818159faf97273dc6aa681565b7f62f336915c19779a574ca5ec6e327da56f347d8e548daf06f207c3d4d381c81481565b61099261128b565b61099e33848484611397565b505050565b7f18d9ff454de989bd126b06bd404b47ede75f9e65543e94e8d212f89d7dcbb87c6109cd816110ae565b600354421115610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a099061264f565b60405180910390fd5b610a1a61128b565b610a2685858585611397565b5050505050565b60026020528060005260406000206000915090505481565b6001602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b83421115610b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b25906126e1565b60405180910390fd5b610b3661128b565b6000610ba3610b9b7f62f336915c19779a574ca5ec6e327da56f347d8e548daf06f207c3d4d381c8148b8b8b805190602001208b8b604051602001610b8096959493929190612701565b60405160208183030381529060405280519060200120610d82565b858585610d9c565b90508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a906127d4565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c6390612405565b919050558614610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f90612840565b60405180910390fd5b610cb4818a8a8a611397565b50505050505050505050565b6000801b81565b6000801b610cd4816110ae565b816003819055505050565b6000801b610cec816110ae565b816004819055505050565b610d0082610855565b610d09816110ae565b610d1383836111aa565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000610d95610d8f6114aa565b836115c4565b9050919050565b6000806000610dad878787876115f7565b91509150610dba816116d9565b8192505050949350505050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1660ff1603610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e906128d2565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fec7796ac22cd691744830d7a8a9a7d21752be77e84ebc1ee5dca0ae6e47d9da383604051610fab9190611c4f565b60405180910390a3505050565b600454471015610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff49061293e565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166004546040516110259061298f565b60006040518083038185875af1925050503d8060008114611062576040519150601f19603f3d011682016040523d82523d6000602084013e611067565b606091505b50509050806110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a2906129f0565b60405180910390fd5b50565b6110bf816110ba6111a2565b61183f565b50565b6110cc8282610a81565b61119e57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111436111a2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6111b48282610a81565b1561128757600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061122c6111a2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6004543410156112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c790612a82565b60405180910390fd5b6004543411156113955760003373ffffffffffffffffffffffffffffffffffffffff16600454346113019190612aa2565b60405161130d9061298f565b60006040518083038185875af1925050503d806000811461134a576040519150601f19603f3d011682016040523d82523d6000602084013e61134f565b606091505b5050905080611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a90612b22565b60405180910390fd5b505b565b60018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff8062ac22dc3b85838812d1c14968311ef4bda78cf9f74aba563533ad670c417848460405161149c929190612bb0565b60405180910390a350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561152657507f000000000000000000000000000000000000000000000000000000000000000046145b15611553577f000000000000000000000000000000000000000000000000000000000000000090506115c1565b6115be7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006118c4565b90505b90565b600082826040516020016115d9929190612c58565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156116325760006003915091506116d0565b6000600187878787604051600081526020016040526040516116579493929190612c8f565b6020604051602081039080840390855afa158015611679573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116c7576000600192509250506116d0565b80600092509250505b94509492505050565b600060048111156116ed576116ec612cd4565b5b816004811115611700576116ff612cd4565b5b031561183c576001600481111561171a57611719612cd4565b5b81600481111561172d5761172c612cd4565b5b0361176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176490612d4f565b60405180910390fd5b6002600481111561178157611780612cd4565b5b81600481111561179457611793612cd4565b5b036117d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cb90612dbb565b60405180910390fd5b600360048111156117e8576117e7612cd4565b5b8160048111156117fb576117fa612cd4565b5b0361183b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183290612e4d565b60405180910390fd5b5b50565b6118498282610a81565b6118c057611856816118fe565b6118648360001c602061192b565b604051602001611875929190612f36565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b79190612f70565b60405180910390fd5b5050565b600083838346306040516020016118df959493929190612f92565b6040516020818303038152906040528051906020012090509392505050565b60606119248273ffffffffffffffffffffffffffffffffffffffff16601460ff1661192b565b9050919050565b60606000600283600261193e9190612fe5565b6119489190613027565b67ffffffffffffffff81111561196157611960611f74565b5b6040519080825280601f01601f1916602001820160405280156119935781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106119cb576119ca61305b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a2f57611a2e61305b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611a6f9190612fe5565b611a799190613027565b90505b6001811115611b19577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611abb57611aba61305b565b5b1a60f81b828281518110611ad257611ad161305b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611b129061308a565b9050611a7c565b5060008414611b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b54906130ff565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bb081611b7b565b8114611bbb57600080fd5b50565b600081359050611bcd81611ba7565b92915050565b600060208284031215611be957611be8611b71565b5b6000611bf784828501611bbe565b91505092915050565b60008115159050919050565b611c1581611c00565b82525050565b6000602082019050611c306000830184611c0c565b92915050565b6000819050919050565b611c4981611c36565b82525050565b6000602082019050611c646000830184611c40565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9582611c6a565b9050919050565b611ca581611c8a565b8114611cb057600080fd5b50565b600081359050611cc281611c9c565b92915050565b611cd181611c36565b8114611cdc57600080fd5b50565b600081359050611cee81611cc8565b92915050565b600060ff82169050919050565b611d0a81611cf4565b8114611d1557600080fd5b50565b600081359050611d2781611d01565b92915050565b6000819050919050565b611d4081611d2d565b8114611d4b57600080fd5b50565b600081359050611d5d81611d37565b92915050565b600080600080600080600060e0888a031215611d8257611d81611b71565b5b6000611d908a828b01611cb3565b9750506020611da18a828b01611cdf565b9650506040611db28a828b01611cdf565b9550506060611dc38a828b01611cdf565b9450506080611dd48a828b01611d18565b93505060a0611de58a828b01611d4e565b92505060c0611df68a828b01611d4e565b91505092959891949750929550565b60008060408385031215611e1c57611e1b611b71565b5b6000611e2a85828601611cb3565b9250506020611e3b85828601611cdf565b9150509250929050565b600080600060608486031215611e5e57611e5d611b71565b5b6000611e6c86828701611cb3565b9350506020611e7d86828701611cb3565b9250506040611e8e86828701611cdf565b9150509250925092565b611ea181611cf4565b82525050565b6000602082019050611ebc6000830184611e98565b92915050565b600060208284031215611ed857611ed7611b71565b5b6000611ee684828501611d4e565b91505092915050565b611ef881611d2d565b82525050565b6000602082019050611f136000830184611eef565b92915050565b60008060408385031215611f3057611f2f611b71565b5b6000611f3e85828601611d4e565b9250506020611f4f85828601611cb3565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fac82611f63565b810181811067ffffffffffffffff82111715611fcb57611fca611f74565b5b80604052505050565b6000611fde611b67565b9050611fea8282611fa3565b919050565b600067ffffffffffffffff82111561200a57612009611f74565b5b61201382611f63565b9050602081019050919050565b82818337600083830152505050565b600061204261203d84611fef565b611fd4565b90508281526020810184848401111561205e5761205d611f5e565b5b612069848285612020565b509392505050565b600082601f83011261208657612085611f59565b5b813561209684826020860161202f565b91505092915050565b6000806000606084860312156120b8576120b7611b71565b5b60006120c686828701611cb3565b93505060206120d786828701611cdf565b925050604084013567ffffffffffffffff8111156120f8576120f7611b76565b5b61210486828701612071565b9150509250925092565b6000806000806080858703121561212857612127611b71565b5b600061213687828801611cb3565b945050602061214787828801611cb3565b935050604061215887828801611cdf565b925050606085013567ffffffffffffffff81111561217957612178611b76565b5b61218587828801612071565b91505092959194509250565b6000602082840312156121a7576121a6611b71565b5b60006121b584828501611cb3565b91505092915050565b60008060008060008060008060006101208a8c0312156121e1576121e0611b71565b5b60006121ef8c828d01611cb3565b99505060206122008c828d01611cb3565b98505060406122118c828d01611cdf565b97505060608a013567ffffffffffffffff81111561223257612231611b76565b5b61223e8c828d01612071565b965050608061224f8c828d01611cdf565b95505060a06122608c828d01611cdf565b94505060c06122718c828d01611d18565b93505060e06122828c828d01611d4e565b9250506101006122948c828d01611d4e565b9150509295985092959850929598565b6000602082840312156122ba576122b9611b71565b5b60006122c884828501611cdf565b91505092915050565b600082825260208201905092915050565b7f4465726567697374657244656c65676174653a207369676e617475726520657860008201527f7069726564000000000000000000000000000000000000000000000000000000602082015250565b600061233e6025836122d1565b9150612349826122e2565b604082019050919050565b6000602082019050818103600083015261236d81612331565b9050919050565b61237d81611c8a565b82525050565b600060a0820190506123986000830188611eef565b6123a56020830187612374565b6123b26040830186611c40565b6123bf6060830185611c40565b6123cc6080830184611c40565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061241082611c36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612442576124416123d6565b5b600182019050919050565b7f4465726567697374657244656c65676174653a20696e76616c6964206e6f6e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006124a96021836122d1565b91506124b48261244d565b604082019050919050565b600060208201905081810360008301526124d88161249c565b9050919050565b7f4e6f74206120726567697374657265642064656c656761746500000000000000600082015250565b60006125156019836122d1565b9150612520826124df565b602082019050919050565b6000602082019050818103600083015261254481612508565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006125a7602f836122d1565b91506125b28261254b565b604082019050919050565b600060208201905081810360008301526125d68161259a565b9050919050565b7f526567697374657244656c65676174653a207265676973747279206261636b6660008201527f696c6c20706572696f6420686173206578706972656400000000000000000000602082015250565b60006126396036836122d1565b9150612644826125dd565b604082019050919050565b600060208201905081810360008301526126688161262c565b9050919050565b7f526567697374657244656c65676174653a207369676e6174757265206578706960008201527f7265640000000000000000000000000000000000000000000000000000000000602082015250565b60006126cb6023836122d1565b91506126d68261266f565b604082019050919050565b600060208201905081810360008301526126fa816126be565b9050919050565b600060c0820190506127166000830189611eef565b6127236020830188612374565b6127306040830187611c40565b61273d6060830186611eef565b61274a6080830185611c40565b61275760a0830184611c40565b979650505050505050565b7f5369676e657220616e642064656c65676174652061646472657373657320646f60008201527f6e2774206d617463680000000000000000000000000000000000000000000000602082015250565b60006127be6029836122d1565b91506127c982612762565b604082019050919050565b600060208201905081810360008301526127ed816127b1565b9050919050565b7f526567697374657244656c65676174653a20696e76616c6964206e6f6e636500600082015250565b600061282a601f836122d1565b9150612835826127f4565b602082019050919050565b600060208201905081810360008301526128598161281d565b9050919050565b7f4465726567697374657244656c65676174653a20416c7265616479206465726560008201527f6769737465726564000000000000000000000000000000000000000000000000602082015250565b60006128bc6028836122d1565b91506128c782612860565b604082019050919050565b600060208201905081810360008301526128eb816128af565b9050919050565b7f496e73756666696369656e742062616c616e636520666f7220726566756e6400600082015250565b6000612928601f836122d1565b9150612933826128f2565b602082019050919050565b600060208201905081810360008301526129578161291b565b9050919050565b600081905092915050565b50565b600061297960008361295e565b915061298482612969565b600082019050919050565b600061299a8261296c565b9150819050919050565b7f526566756e64206661696c656400000000000000000000000000000000000000600082015250565b60006129da600d836122d1565b91506129e5826129a4565b602082019050919050565b60006020820190508181036000830152612a09816129cd565b9050919050565b7f526567697374657244656c65676174653a20696e73756666696369656e74206660008201527f6565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a6c6022836122d1565b9150612a7782612a10565b604082019050919050565b60006020820190508181036000830152612a9b81612a5f565b9050919050565b6000612aad82611c36565b9150612ab883611c36565b9250828203905081811115612ad057612acf6123d6565b5b92915050565b7f526566756e64206f662065786365737320666565206661696c65640000000000600082015250565b6000612b0c601b836122d1565b9150612b1782612ad6565b602082019050919050565b60006020820190508181036000830152612b3b81612aff565b9050919050565b600081519050919050565b60005b83811015612b6b578082015181840152602081019050612b50565b60008484015250505050565b6000612b8282612b42565b612b8c81856122d1565b9350612b9c818560208601612b4d565b612ba581611f63565b840191505092915050565b6000604082019050612bc56000830185611c40565b8181036020830152612bd78184612b77565b90509392505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000612c21600283612be0565b9150612c2c82612beb565b600282019050919050565b6000819050919050565b612c52612c4d82611d2d565b612c37565b82525050565b6000612c6382612c14565b9150612c6f8285612c41565b602082019150612c7f8284612c41565b6020820191508190509392505050565b6000608082019050612ca46000830187611eef565b612cb16020830186611e98565b612cbe6040830185611eef565b612ccb6060830184611eef565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612d396018836122d1565b9150612d4482612d03565b602082019050919050565b60006020820190508181036000830152612d6881612d2c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612da5601f836122d1565b9150612db082612d6f565b602082019050919050565b60006020820190508181036000830152612dd481612d98565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e376022836122d1565b9150612e4282612ddb565b604082019050919050565b60006020820190508181036000830152612e6681612e2a565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612ea3601783612be0565b9150612eae82612e6d565b601782019050919050565b6000612ec482612b42565b612ece8185612be0565b9350612ede818560208601612b4d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612f20601183612be0565b9150612f2b82612eea565b601182019050919050565b6000612f4182612e96565b9150612f4d8285612eb9565b9150612f5882612f13565b9150612f648284612eb9565b91508190509392505050565b60006020820190508181036000830152612f8a8184612b77565b905092915050565b600060a082019050612fa76000830188611eef565b612fb46020830187611eef565b612fc16040830186611eef565b612fce6060830185611c40565b612fdb6080830184612374565b9695505050505050565b6000612ff082611c36565b9150612ffb83611c36565b925082820261300981611c36565b915082820484148315176130205761301f6123d6565b5b5092915050565b600061303282611c36565b915061303d83611c36565b9250828201905080821115613055576130546123d6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061309582611c36565b9150600082036130a8576130a76123d6565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006130e96020836122d1565b91506130f4826130b3565b602082019050919050565b60006020820190508181036000830152613118816130dc565b905091905056fea2646970667358221220e028e149747d32d5588dc1a24d673ff43243999d2ebca49296d7d2b4678fe03164736f6c63430008130033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2022,
        "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
        "label": "delegates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint8)))"
      },
      {
        "astId": 2026,
        "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2028,
        "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
        "label": "expiryDateForRegistryBackfill",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2030,
        "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
        "label": "registrationFeeAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint8)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint8)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint8))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint8))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint8))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint8)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/DelegateRegistryPayable.sol:DelegateRegistryPayable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}